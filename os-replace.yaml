---
- hosts: cloud
  gather_facts: false
  become: false
  vars:
    platform: "openstack"
    test_os: "rhel-9-4"
    ssh_key_pub: ""
    inventory_file: ""
    cloud_profile: "rhos-01"
    images:
      rhel-9-4: RHEL-9.4.0-x86_64-nightly-latest
      centos-stream-9: edge-centos-stream-9
    image_family:
      centos-stream-9: centos-stream-9
    image_project:
      centos-stream-9: centos-cloud

  tasks:
    - set_fact:
        random_num: "{{ 9999 | random(start=1001) }}"
    - set_fact:
        instance_name: "bootc-{{ platform }}-{{ test_os }}-{{ random_num }}"

    - name: Deploy runner on openstack
      block:
        - name: create a new openstack keypair
          openstack.cloud.keypair:
            cloud: "{{ cloud_profile }}"
            state: present
            name: "kp-bootc-{{ random_num }}"
            public_key_file: "{{ ssh_key_pub }}"

        - name: create security group
          openstack.cloud.security_group:
            cloud: "{{ cloud_profile }}"
            name: "sg-bootc-{{ random_num }}"
            state: present
            description: "security group for bootc test on {{ test_os }}"

        - name: set ssh rule for security group
          openstack.cloud.security_group_rule:
            cloud: "{{ cloud_profile }}"
            security_group: "sg-bootc-{{ random_num }}"
            protocol: tcp
            port_range_min: 22
            port_range_max: 22
            remote_ip_prefix: 0.0.0.0/0

        - name: Deploy openstack instance
          openstack.cloud.server:
            cloud: "{{ cloud_profile }}"
            name: "{{ instance_name }}"
            image: "{{ images[test_os] }}"
            flavor: "ci.standard.small"
            network: "shared_net_9"
            key_name: "kp-bootc-{{ random_num }}"
            security_groups: "sg-bootc-{{ random_num }}"
            auto_ip: true
            config_drive: true
            wait: true
            timeout: 600
            userdata: |
              #cloud-config
              packages:
                - python3
                - python3-dnf

        - name: Makre sure instance is running
          openstack.cloud.server_info:
            cloud: "{{ cloud_profile }}"
            server: "{{ instance_name }}"
          register: instance_status_result
          retries: 20
          until: instance_status_result.servers[0].vm_state == "active" and instance_status_result.servers[0].access_ipv4 != ""

        - set_fact:
            instance_ip: "{{ instance_status_result.servers[0].addresses.shared_net_9[0].addr }}"
          when:
            - instance_status_result is succeeded
      when: platform == "openstack"

    - name: Deploy runner on Google Cloud
      block:
        - name: gcloud/gsutil - authorizing with a service account
          command:
            /usr/bin/gcloud auth activate-service-account \
            --key-file="{{ lookup('env', 'GCP_SERVICE_ACCOUNT_FILE') }}"

        - name: Create gcp key file
          shell: sed "s/ssh-rsa/cloud-user:ssh-rsa/" "{{ ssh_key_pub }}" > "{{ playbook_dir }}/gcp_key"
          when: "'centos' in test_os"

        - set_fact:
            image_args: "--image-family={{ image_family[test_os] }} --image-project={{ image_project[test_os] }}"
          when: "'centos' in test_os"

        - name: Create gcp instance
          command:
            "/usr/bin/gcloud compute instances create {{ instance_name }} \
            --zone=us-central1-a \
            --machine-type=n2-standard-2 \
            --boot-disk-auto-delete \
            --boot-disk-size=80GB \
            --boot-disk-type=pd-ssd \
            --metadata-from-file=ssh-keys={{ playbook_dir }}/gcp_key \
            --metadata=block-project-ssh-keys=TRUE \
            --provisioning-model=SPOT \
            {{ image_args }} \
            --service-account={{ lookup('env', 'GCP_SERVICE_ACCOUNT_NAME') }} \
            --project={{ lookup('env', 'GCP_PROJECT') }} \
            --format=json"
          register: result_instance

        - set_fact:
            instance_ip: "{{ result_instance.stdout | from_json | json_query('[0].networkInterfaces[0].accessConfigs[0].natIP') }}"
      when: platform == "gcp"

    - name: Waits until instance is reachable
      wait_for:
        host: "{{ instance_ip }}"
        port: 22
        search_regex: OpenSSH
        delay: 10
      retries: 30
      register: result_ssh_check
      until: result_ssh_check is success

    - name: Add instance ip into host group guest
      add_host:
        name: "{{ instance_ip }}"
        groups: guest

    - name: Ensure cloud-init has finished
      raw: test -f /var/lib/cloud/instance/boot-finished
      retries: 30
      delay: 20
      register: cloud_init_check
      changed_when: false
      until: cloud_init_check is success
      delegate_to: "{{ instance_ip }}"
      when: platform == "openstack"

    - name: Wait 10 seconds for gcp instance
      wait_for:
        timeout: 10
      delegate_to: localhost
      when: platform == "gcp"

    - name: Write instance ip to inventory file
      community.general.ini_file:
        path: "{{ inventory_file }}"
        section: guest
        option: guest ansible_host
        value: "{{ instance_ip }}"
        no_extra_spaces: true

    - name: Write random number to inventory file
      community.general.ini_file:
        path: "{{ inventory_file }}"
        section: cloud:vars
        option: random_num
        value: "{{ random_num }}"
        no_extra_spaces: true

    - name: Write instance name to inventory file
      community.general.ini_file:
        path: "{{ inventory_file }}"
        section: cloud:vars
        option: instance_name
        value: "{{ instance_name }}"
        no_extra_spaces: true

- hosts: guest
  gather_facts: false
  become: false

  tasks:
    - name: Install podman and skopeo
      package:
        name:
          - podman
          - skopeo
        state: present
      become: true

    - name: Install image
      command:
        "podman run \
         --rm \
         --privileged \
         --pid=host \
         -v /:/target \
         --security-opt label=type:unconfined_t \
         {{ test_image_url }} \
         bootc install to-filesystem --replace=alongside /target"
      become: true

    - name: Reboot to deploy new system
      reboot:
      become: true

    - name: Wait for connection to become reachable/usable
      wait_for_connection:
      delay: 30
